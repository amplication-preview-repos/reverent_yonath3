/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SocialAccount as PrismaSocialAccount,
  Platform as PrismaPlatform,
  User as PrismaUser,
} from "@prisma/client";

export class SocialAccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SocialAccountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.socialAccount.count(args);
  }

  async socialAccounts(
    args: Prisma.SocialAccountFindManyArgs
  ): Promise<PrismaSocialAccount[]> {
    return this.prisma.socialAccount.findMany(args);
  }
  async socialAccount(
    args: Prisma.SocialAccountFindUniqueArgs
  ): Promise<PrismaSocialAccount | null> {
    return this.prisma.socialAccount.findUnique(args);
  }
  async createSocialAccount(
    args: Prisma.SocialAccountCreateArgs
  ): Promise<PrismaSocialAccount> {
    return this.prisma.socialAccount.create(args);
  }
  async updateSocialAccount(
    args: Prisma.SocialAccountUpdateArgs
  ): Promise<PrismaSocialAccount> {
    return this.prisma.socialAccount.update(args);
  }
  async deleteSocialAccount(
    args: Prisma.SocialAccountDeleteArgs
  ): Promise<PrismaSocialAccount> {
    return this.prisma.socialAccount.delete(args);
  }

  async getPlatform(parentId: string): Promise<PrismaPlatform | null> {
    return this.prisma.socialAccount
      .findUnique({
        where: { id: parentId },
      })
      .platform();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.socialAccount
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
