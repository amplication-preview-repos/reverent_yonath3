/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Platform } from "./Platform";
import { PlatformCountArgs } from "./PlatformCountArgs";
import { PlatformFindManyArgs } from "./PlatformFindManyArgs";
import { PlatformFindUniqueArgs } from "./PlatformFindUniqueArgs";
import { CreatePlatformArgs } from "./CreatePlatformArgs";
import { UpdatePlatformArgs } from "./UpdatePlatformArgs";
import { DeletePlatformArgs } from "./DeletePlatformArgs";
import { PostFindManyArgs } from "../../post/base/PostFindManyArgs";
import { Post } from "../../post/base/Post";
import { SocialAccountFindManyArgs } from "../../socialAccount/base/SocialAccountFindManyArgs";
import { SocialAccount } from "../../socialAccount/base/SocialAccount";
import { PlatformService } from "../platform.service";
@graphql.Resolver(() => Platform)
export class PlatformResolverBase {
  constructor(protected readonly service: PlatformService) {}

  async _platformsMeta(
    @graphql.Args() args: PlatformCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Platform])
  async platforms(
    @graphql.Args() args: PlatformFindManyArgs
  ): Promise<Platform[]> {
    return this.service.platforms(args);
  }

  @graphql.Query(() => Platform, { nullable: true })
  async platform(
    @graphql.Args() args: PlatformFindUniqueArgs
  ): Promise<Platform | null> {
    const result = await this.service.platform(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Platform)
  async createPlatform(
    @graphql.Args() args: CreatePlatformArgs
  ): Promise<Platform> {
    return await this.service.createPlatform({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Platform)
  async updatePlatform(
    @graphql.Args() args: UpdatePlatformArgs
  ): Promise<Platform | null> {
    try {
      return await this.service.updatePlatform({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Platform)
  async deletePlatform(
    @graphql.Args() args: DeletePlatformArgs
  ): Promise<Platform | null> {
    try {
      return await this.service.deletePlatform(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Post], { name: "posts" })
  async findPosts(
    @graphql.Parent() parent: Platform,
    @graphql.Args() args: PostFindManyArgs
  ): Promise<Post[]> {
    const results = await this.service.findPosts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [SocialAccount], { name: "socialAccounts" })
  async findSocialAccounts(
    @graphql.Parent() parent: Platform,
    @graphql.Args() args: SocialAccountFindManyArgs
  ): Promise<SocialAccount[]> {
    const results = await this.service.findSocialAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
