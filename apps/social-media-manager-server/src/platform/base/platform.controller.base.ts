/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlatformService } from "../platform.service";
import { PlatformCreateInput } from "./PlatformCreateInput";
import { Platform } from "./Platform";
import { Post } from "../../post/base/Post";
import { PlatformFindManyArgs } from "./PlatformFindManyArgs";
import { PlatformWhereUniqueInput } from "./PlatformWhereUniqueInput";
import { PlatformUpdateInput } from "./PlatformUpdateInput";
import { PostFindManyArgs } from "../../post/base/PostFindManyArgs";
import { PostWhereUniqueInput } from "../../post/base/PostWhereUniqueInput";
import { SocialAccountFindManyArgs } from "../../socialAccount/base/SocialAccountFindManyArgs";
import { SocialAccount } from "../../socialAccount/base/SocialAccount";
import { SocialAccountWhereUniqueInput } from "../../socialAccount/base/SocialAccountWhereUniqueInput";

export class PlatformControllerBase {
  constructor(protected readonly service: PlatformService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Platform })
  @swagger.ApiBody({
    type: PlatformCreateInput,
  })
  async createPlatform(
    @common.Body() data: PlatformCreateInput
  ): Promise<Platform> {
    return await this.service.createPlatform({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Platform] })
  @ApiNestedQuery(PlatformFindManyArgs)
  async platforms(@common.Req() request: Request): Promise<Platform[]> {
    const args = plainToClass(PlatformFindManyArgs, request.query);
    return this.service.platforms({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Platform })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async platform(
    @common.Param() params: PlatformWhereUniqueInput
  ): Promise<Platform | null> {
    const result = await this.service.platform({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Platform })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: PlatformUpdateInput,
  })
  async updatePlatform(
    @common.Param() params: PlatformWhereUniqueInput,
    @common.Body() data: PlatformUpdateInput
  ): Promise<Platform | null> {
    try {
      return await this.service.updatePlatform({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Platform })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlatform(
    @common.Param() params: PlatformWhereUniqueInput
  ): Promise<Platform | null> {
    try {
      return await this.service.deletePlatform({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/posts")
  @ApiNestedQuery(PostFindManyArgs)
  async findPosts(
    @common.Req() request: Request,
    @common.Param() params: PlatformWhereUniqueInput
  ): Promise<Post[]> {
    const query = plainToClass(PostFindManyArgs, request.query);
    const results = await this.service.findPosts(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        platform: {
          select: {
            id: true,
          },
        },

        postContent: true,
        postCreatedAt: true,
        postPlatform: true,
        postUser: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/posts")
  async connectPosts(
    @common.Param() params: PlatformWhereUniqueInput,
    @common.Body() body: PostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      posts: {
        connect: body,
      },
    };
    await this.service.updatePlatform({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/posts")
  async updatePosts(
    @common.Param() params: PlatformWhereUniqueInput,
    @common.Body() body: PostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      posts: {
        set: body,
      },
    };
    await this.service.updatePlatform({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/posts")
  async disconnectPosts(
    @common.Param() params: PlatformWhereUniqueInput,
    @common.Body() body: PostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      posts: {
        disconnect: body,
      },
    };
    await this.service.updatePlatform({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/socialAccounts")
  @ApiNestedQuery(SocialAccountFindManyArgs)
  async findSocialAccounts(
    @common.Req() request: Request,
    @common.Param() params: PlatformWhereUniqueInput
  ): Promise<SocialAccount[]> {
    const query = plainToClass(SocialAccountFindManyArgs, request.query);
    const results = await this.service.findSocialAccounts(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        platform: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/socialAccounts")
  async connectSocialAccounts(
    @common.Param() params: PlatformWhereUniqueInput,
    @common.Body() body: SocialAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      socialAccounts: {
        connect: body,
      },
    };
    await this.service.updatePlatform({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/socialAccounts")
  async updateSocialAccounts(
    @common.Param() params: PlatformWhereUniqueInput,
    @common.Body() body: SocialAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      socialAccounts: {
        set: body,
      },
    };
    await this.service.updatePlatform({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/socialAccounts")
  async disconnectSocialAccounts(
    @common.Param() params: PlatformWhereUniqueInput,
    @common.Body() body: SocialAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      socialAccounts: {
        disconnect: body,
      },
    };
    await this.service.updatePlatform({
      where: params,
      data,
      select: { id: true },
    });
  }
}
